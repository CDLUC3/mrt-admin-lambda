# Properties
#   class - class to create
#   params - parameters to pass to the constructor
#   category: 
#     admin obj | audit | collections | collections/time | concurrent update | files | ingest | mime types |
#     objects | replication | reports | storage nodes
#   description: |
#     markdown description of the purpose of the action
owners:
  class: OwnerQuery
  category: collections
  description: |
    This reports lists the Merritt Owner objects defined in the inventory database.
    A [view in the Merritt Billing database](https://github.com/CDLUC3/mrt-admin-lambda/blob/main/merrit-billing/views.sql) helps to group each of the collection objects by campus. 
collections:
  class: CollectionQuery
  category: collections
  description: |
    This reports lists the Merritt Collection objects defined in the inventory database.
    A [view in the Merritt Billing database](https://github.com/CDLUC3/mrt-admin-lambda/blob/main/merrit-billing/views.sql) helps to group each of the collection objects by campus. 
mimes:
  class: MimeQuery 
  category: mime types
  description: |
    This report categorizes Merritt content by Mime Type.  A high-level _Mime Group_ is assigned to each Mime Type based on the work of the UC Digital Preservation Strategy working group.
    A [view in the Merritt Billing database](https://github.com/CDLUC3/mrt-admin-lambda/blob/main/merrit-billing/views.sql) created the Mime Group organization based on Mime Type strings. 
collnodes:
  class: CollectionNodesQuery
  category: storage nodes
  description: |
    This report describes the primary storage node and 2 secondary storage nodes for each Merritt Collection.
    This report also provides a count of objects for each collection/node in the table.
    _If more than 2 secondary nodes are configured, only 2 nodes will be displayed._
    #### Deprecated: This report has been superseded by the collection admin report *Manage Storage Nodes for a Collection*.
nodes:
  class: NodesQuery
  category: storage nodes
  description: |
    This report lists all defined storage nodes in the inventory database. 
    The report displays the last daily count of objects and files for each storage node (captured in the billing database).

    Click the **Filter Data** button to remove empty nodes from the report.
objects_by_ark:
  class: ObjectsByArkQuery
  category: objects
  description: |
    This report displays an object for a specific ark or matching an ark wildcard string such as `ark:/%`.
       
    Click the Object Id link to see a detailed listing of the files contained in the object.

    If an object exists in more than one collection, the collection ids will appear as a list.
    
    A more feature rich version of this report is available in the Collection Admin Tool report **Manage Object Storage**. 
objects_by_title:
  class: ObjectsByTitleQuery
  category: objects
  description: |
    This report displays an object with a matching title or matching a title wildcard string such as `Merritt %`.
    
    Click the Object Id link to see a detailed listing of the files contained in the object.
objects_by_local_id:
  class: ObjectsByLocalIdQuery
  category: objects
  description: |
    This report displays an object with an exact match to a localid such as `doi:10.5061/dryad.9999`.  
    Wildcard searching is not permitted.
    
    Click the Object Id link to see a detailed listing of the files contained in the object.
objects_by_author:
  class: ObjectsByAuthorQuery
  category: objects
  description: |
    This report displays an object with a matching author or matching a author wildcard string such as `Jane D%`.
    
    Click the Object Id link to see a detailed listing of the files contained in the object.
objects_large:
  class: ObjectsLargeQuery
  category: objects
  description: |
    Generate a sample list of objects larger than 1GB (1073741824 bytes).  
    To keep the query reasonably quick, results are not in sorted order.
    The intention of this report is to identify objects that might be useful for performance related testing.
objects_many_files:
  class: ObjectsManyFilesQuery
  category: objects
  description: |
    Generate a sample list of objects containing more than 1000 files.
    To keep the query reasonably quick, results are not in sorted order.
    The intention of this report is to identify objects that might be useful for performance related testing.
objects_recent:
  class: ObjectsRecentQuery
  category: objects
  description: |
    This report lists the last ingest performed for each Merritt collection.  
    Results are sorted from collection most recently updated to least recently updated.
objects_recent_coll:
  class: ObjectsRecentCollQuery
  category: objects
  description: |
    This report lists the most recently ingested objects for a specific collection.  
    Results are sorted from object most recently updated to least recently updated.
objects_by_batch:
  class: ObjectsByBatchQuery
  category: objects
  description: |
    This report lists the objects ingested in a Ingest Batch.
    This report is accessed from the **Recent Ingests/Ingests for Day** report.
objects_by_job:
  class: ObjectsByJobQuery
  category: objects
  description: |
    This report lists the objects ingested in an Ingest Batch/Job.
    This report is accessed from links in the Collection Admin Tool.
files_by_name_coll:
  class: FilesByNameCollQuery
  category: files
  description: |
    This report lists the objects containing files with a specific filename.
    To keep the report efficient, it is recommended to scope the query to a specific collection mnemonic.

    Click the Object Id link to see a detailed listing of the files contained in the object.
filesize:
  class: FilesizeQuery
  category: files
  description: |
    Generate a report on producer files size max/min/average within Merritt.
filesizedist:
  class: FilesizeDistributionQuery
  category: files
  iterative: true
  description: |
    Generate a report on the distribution of producer files of a specific size ranges within Merritt.
count_objects:
  class: CountObjectsQuery
  category: collections
  description: |
    This report provides a count of objects by collection. The results are summarized at a campus level.
collections_by_node:
  class: CollectionsByNodeQuery
  category: storage nodes
  description: |
    This report provides a count of objects by collection residing on a specific storage node.
    This report is accessed from the **Storage Nodes** report.
collections_by_owner:
  class: CollectionsByOwnerQuery
  category: collections
  description: |
    This report lists the collections owned by a Merritt Owner.
    This report is accessed from the **File Counts by Owner** report.
collections_by_mime_type:
  class: CollectionsByMimeQuery
  category: mime types
  params: ['mime_type']
  description: |
    This report breaks down the count of objects by collection for a specific Mime Type.
    This report is accessed from the **Mime Groups** report.
collections_by_mime_group:
  class: CollectionsByMimeQuery
  category: mime types
  params: ['mime_group']
  description: |
    This report breaks down the count of objects by collection for a specific Mime Group.
    This report is accessed from the **Mime Groups** report.
collections_by_time_count_producer:
  class: CollectionsByTimeQuery
  category: collections/time
  params: ['count_files', 'producer']
  description: |
    This report shows the count of **producer** files added to each Merritt collection.
    Based on the interval parameter, the report may show Counts
    - year by year since the Merritt system was established
    - day by day for the past week
    - week by week for the last 4 weeks
collections_by_time_count:
  class: CollectionsByTimeQuery
  category: collections/time
  params: ['count_files', '']
  description: |
    This report shows the count of files added to each Merritt collection.
    This report includes both system and producer files. 
    Based on the interval parameter, the report may show Counts
    - year by year since the Merritt system was established
    - day by day for the past week
    - week by week for the last 4 weeks
collections_by_time_size:
  class: CollectionsByTimeQuery
  category: collections/time
  params: ['billable_size', '']
  description: |
    This report shows the bytes added to each Merritt collection.
    Based on the interval parameter, the report may show Counts
    - year by year since the Merritt system was established
    - day by day for the past week
    - week by week for the last 4 weeks
collections_by_time_size_cumulative:
  class: CollectionsByTimeCumulativeQuery
  category: collections/time
  params: ['billable_size', '']
  description: |
    This report shows the cumulative byte count totals in each Merritt collection year by year since the Merritt system was established.
collection_details:
  class: CollectionDetailsQuery
  category: collections
  params: ['inv_collection_id']
  description: |
    This report describes the contents of a collection by mime type and mime group.
collection_info:
  class: CollectionInfoQuery
  category: collections
  params: ['inv_collection_id']
  description: |
    This report provides a landing page that links to all useful reports related to a Merritt collection.
collection_group_details:
  class: CollectionDetailsQuery
  category: collections
  params: ['ogroup']
  description: |
    This report describes the contents of collections for a campus by mime type and mime group.
invoices:
  class: InvoicesQuery
  category: collections
  description: |
    This report calculates the Merritt recharge for each campus.  
    This report can be run for all campuses or for a specific campus.
    The report also accounts for the significant recharge calculations that were implemented in FY2019, 
    including the 10TB storage allocation made available to each main campus library free of recharge.
audit_status:
  class: AuditStatusQuery
  category: audit
  description: |
    Count the number of files with an irregular audit status.  

    - For status `unknown` and `processing`, no action is generally required.  These states indicate that an item is being processed.
    - For status `system-unavailable` or `unverified`, a retry is generally recommended.
    - A status of `size-mismatch` or `digest-mismatch` indicates that either a copy error occurred or this could show evidence of bit rot.  Immediate investigation is required.
    - Files with a status of `verified` are explicitly excluded from this report for performance reasons.
audit_status_time:
  class: AuditStatusTimeQuery
  category: audit
  description: |
    This report identifies the number of files that have been processed by the audit service in the last hour or minute.
    Note: the audit service performs database updates in batches, so these number will tend to be reported in multiples of 248 records.
    #### Consider retiring this report in favor of other existing reports.
audit_oldest:
  class: AuditOldestQuery
  category: audit
  description: |
    Identify the oldest previously audited file in the inventory database.
    - If less than 60 days old, PASS
    - If 60-90 days old, WARN.  Consider adding capacity to the audit service.
    - If more than 90 days, ERROR.  The system is not meeting expectations for active fixity checking.
audit_size:
  class: AuditQueueSizeQuery
  category: audit
  description: |
    This report shows the size of the audit queue.  Since the audit service performs database updates to 496 records at a time, 
    the entries in this report will generally be multiples of 248.  If the audit service is not gracefully shutdown, old queue entries will be reported.
    Once these entries are older than 10 hours old, an error will be reported.
    The collection admin tool has an action defined to clear old queue entries from the database.
audit_processed_size:
  class: AuditProcessedSizeQuery
  category: audit
  description: |
    Report on the number of files/bytes audited each day for the past 30-90 days.
    This report uses aggregate data from the billing database which is computed on a daily basis.
    This report will attempt to identify any significant degredation in performance from the audit service over the prior 6 day period.
    Performance issues older than 6 days are ignored by the report.
audit_processed_hours:
  class: AuditProcessedSizeIterativeQuery
  category: audit
  iterative: true
  description: |
    Report on the number of files/bytes audited hour by hour since midnight PDT.
    This report uses real-time data from the inv_audits table.
    The query is iterative looking at counts hour-by-hour to prevent timeouts.
replication_needed:
  class: ReplicationNeededQuery
  category: replication
  description: |
    This report generates a list of objects requiring replication, based on entries in the `inv_nodes_inv_objects` table that have a primary copy of an object but no secondary copy.
replication_initiated:
  class: ReplicationInitiatedQuery
  category: replication
  description: |
    This report generates a list of objects for which replication has been initiated.
    For objects with specific know replication issues, a category can be assigned to an object.

    - *FAIL*: 
      - Replication started more than 24 hours ago .
      - Replication not yet started, it has been more than 24 hours since the object was created/modified.
    - *WARN*: 
      - Replication started more than 4 hours ago.
      - Replication not yet started, it has been more than 4 hours since the object was created/modified.
    - *PASS*: 
      - Replication started less than 4 hours ago.
      - Replication not yet started, it has been less than 4 hours since the object was created/modified.
    - *INFO*: Known replication exception has been coded into the report
replication_failed:
  class: ReplicationFailedQuery
  category: replication
  description: |
    This report generates a list of objects for which replication has failed.
    For objects with specific know replication issues, a category can be assigned to an object.
replic_processed:
  class: ReplicProcessedQuery
  category: replication
  iterative: true
  description: |
    Count the number of object replications performed over a period of time.
    The need for replication is driven by ingest actions or by the reconfiguration of storage nodes, so the number of records processed over time may be irregular.
doi:
  class: DoiConflictQuery
  category: objects
  description: |
    Identify potential localid conflicts by looking for duplicate DOI's within `inv_objects.erc_where`.  
    This issue has occasionally occurred for Dryad content.
big_ingest:
  class: BigIngestQuery
  category: ingest
  description: |
    Enumerate large batch ingests (by object count) in the last X days.
recent_ingests:
  class: RecentIngestsQuery
  category: ingest
  description: |
    Enumerate the ingest batches that were processed on a specific date.
    All Dryad submissions for the specific date will be counted as a single batch.
arklist:
  class: ArklistQuery
  category: objects
  test_params:
    arklist: a,b
  description: |
    This report supports the [Multiple Ark Query](/web/ark.html) page.
    This page will allow you to copy/paste text containing one or more arks and convert that into a parameter list for the report.
locallist:
  class: LocalidListQuery
  category: objects
  test_params:
    locallist: a,b
  description: |
    This report supports the [Multiple LocalId Query](/web/localid.html) OR [Multiple DOI Query](/web/doi.html) page.
    This page will allow you to copy/paste text containing one or more localids and convert that into a parameter list for the report.
    Upon form execution, a page is returned with a list of requested objects and their details.
    Options are presented to enable retrieval or either object summary or object metadata details.
arkcompare:
  class: ArklistCompareQuery
  category: objects
  test_params:
    arklist: a,b
  description: |
    This report supports the [Multiple Ark Compare](/web/ark.html) query page.
    Select `Compare Rpt` to run this report.
localcompare:
  class: LocalidListCompareQuery
  category: objects
  test_params:
    locallist: a,b
  description: |
    This report supports the [Multiple LocalId Compare](/web/localid.html) OR [Multiple DOI Compare](/web/doi.html) query page.
    Select `Compare Rpt` to run this report.
con_primary:
  class: ConsistencyPrimaryNodeQuery
  category: storage nodes
  description: |
    Report on collections with non-standard primary node configurations.
    Collections that have been configured as "Public Collections" are currently recorded with an INFO status.  
    Eventually, each of these collections will be re-configured to use SDSC as a primary node. 
con_secondary:
  class: ConsistencySecondaryNodeQuery
  category: storage nodes
  description: |
    Report on collections with non-standard secondary node configurations.
    Current standard configurations for secondary nodes include Glacier and Wasabi, or SDSC and Wasabi.
con_files:
  class: ConsistencyFilesQuery
  category: replication
  description: |
    This report will query `inv_audits` to count the number of files having an irregular number of recorded copies. 
    The Merritt system typically has one primary copy of an object and 2 secondary copies.

    Files with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
    Files with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.
    An error captured by this report can often be directly correlated with an error in the ConsistencyObjectsQuery report.
ccon_no_audit:
  class: ConsistencyFilesNoAuditQuery
  category: replication
  description: |
    Identify files in `inv_files` that have not yet been recorded in `inv_audits`.
    #### Note: this report is too slow to be run from the Admin Tool.  It is initiated from AWS CLI as a part of the daily consistency reports.
con_objects:
  class: ConsistencyObjectsQuery
  category: replication
  description: |
    This report will query `inv_nodes_inv_objects` to count the number of objects having an irregular number of replicated copies. 
    The Merritt system typically has one primary copy of an object and 2 secondary copies.

    Objects with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
    Objects with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.
    An error captured by this report can often be directly correlated with an error in the ConsistencyFilesQuery report.
con_versions:
  class: ConsistencyVersionsQuery
  category: replication
  description: |
    Count objects containing irregularities in the `inv_versions` table.
    - Same version number created twice
    - Gap in version numbers (has never occurred)
    This has occurred when an object was simultaneously modified by 2 ingest workers at the same time.
    The Merritt Team is implementing changes to prevent this issue from occurring in the future.
obj_version_clobber:
  class: ObjectsVersionClobberQuery
  category: concurrent update
  description: |
    Enumerate objects containing irregularities in the `inv_versions` table: Same version number created twice
    This issue has occurred ~170 times in the life of the system.  In most instances, the issue was resolved by rebuilding the inventory record.
    A couple of items required manual reassembly of the inventory record from cloud storage entries.
    The Merritt Team is implementing changes to prevent this issue from occurring in the future.
obj_version_gap:
  class: ObjectsVersionGapQuery
  category: concurrent update
  description: |
    Enumerate objects containing irregularities in the `inv_versions` table: Gap in version numbers 
    (issue has never occurred).
con_replic:
  class: ConsistencyReplicationReqQuery
  category: replication
  description: |
    Count the number of objects with a primary entry in `inv_nodes_inv_objects` and no secondary entry in `inv_nodes_inv_objects`. 
    Entries older than 1 day will trigger a WARN.  Entries 2 days or older will trigger an ERROR.

    From this report, you can navigate to a list of objects needing replication.  
    From that report, you can navigate to the object's storage management page to re-initiate replication.
file_copies_needed:
  class: ObjectsFileCopiesNeededQuery
  category: replication
  description: |
    Enumerate a list of objects containing files that have not been consistently replicated according to standard collection configuration (primary + 2 replicated copies).
    Results of this report may directly correlate with those in the ObjectsObjectCopiesNeededQuery report.
object_copies_needed:
  class: ObjectsObjectCopiesNeededQuery
  category: replication
  description: |
    Enumerate a list of objects that have not been consistently replicated according to standard collection configuration (primary + 2 replicated copies).
    Result of this report may directly correlate with those in the ObjectsFileCopiesNeededQuery report.
mult_coll:
  class: MultipleCollectionsQuery
  category: objects
  description: |
    Count objects that have been assigned to multiple Merritt collections.
    Objects residing in multiple collections is a legacy Merritt feature.
object_mult_coll:
  class: ObjectsMultipleCollQuery
  category: objects
  description: |
    Enumerate objects that have been assigned to multiple Merritt collections.
    Objects residing in multiple collections is a legacy Merritt feature.
admin_obj:
  class: AdminObjectsQuery
  category: admin obj
  description: |
    Enumerate Merritt Admin Objects for a specific aggregate role.
admin_obj_files:
  class: AdminObjectsFilesQuery
  category: admin obj
  description: |
    Display the `inv_files` entries for a set of Merritt Admin Objects.  
    In reality, these objects are always dummy objects with no meaningful producer files. 
    The system files exist to help reconstruct the inventory database from cloud storage if a disaster occurs.
admin_obj_agg:
  class: AdminObjectsAggQuery
  category: admin obj
  description: |
    Count all Merritt Admin Objects by aggregate role.
admin_coll:
  class: AdminCollectionsQuery
  category: admin obj
  description: |
    Merritt SLA objects have corresponding entries in the `inv_collections` table. 
    List the known information for these admin objects.
report:
  class: ReportRetrieve
  category: reports
  description: |
    Retrieve a previously run conistency report.
    Consistency reports are defined in the [mrt-cron](https://github.com/CDLUC3/mrt-cron/blob/main/consistency-driver/reports.yml) repo.
filelist:
  class: ObjectIdFilesQuery
  category: objects
  description: |
    Given an object id, list the versions/files for the object.
    For each file, list the nodes where the object has been replicated.
    For each replication, list any instances in which the audit process has not been successful.

    Due to lambda resource constraints, a maximum of 2,000 files will be listed.
obj_audit_status:
  class: ObjectsAuditStatusQuery
  category: audit
  description: |
    Enumerate the specific files that have been characterized with an incomplete OR error audit status.
    From the report, navigate to the object storage admin page to re-initiate the audit process.
collection_node_cleanup_required:
  class: CollectionNodeCleanupQuery
  category: storage nodes
  description: |
    For a specific collection, identify any secondary replicated copies of the object stored on a node that is no longer configured in `inv_collections_inv_nodes`. 
    Results will appear in this report after a secondary node has been removed for a specific collection.
ingest_bytes_by_hour:
  class: IngestBytesByHourQuery
  category: files
  description: |
    Generate a graphable list of total bytes ingested for a 4 hour period over the past week.